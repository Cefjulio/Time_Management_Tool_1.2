
import datos.Conexion;
import java.awt.Color;
import java.awt.MouseInfo;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;

import java.awt.event.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Time;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author auyon.j6356
 */
public class homePage extends javax.swing.JFrame {

    /**
     * Creates new form homePage
     */
    public homePage() {
        initComponents();
        
        //Verifying if the user is trying to close the APP
        //First invalidating the close X button and right click, it will not close. 
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
       //Now setting up our own behavior in case they do close it with task manager
        
        this.addWindowListener(new WindowAdapter(){ 
            @Override
            public void windowClosing(WindowEvent e) {
                int x = JOptionPane.showConfirmDialog(null, "Are you sure you want to close the APP?", "Close", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
           
                if(x == JOptionPane.YES_OPTION){
                    //e.getWindow().dispose();
                    System.exit(0);
                    
                    //Calling another procedure equal to the log out button button and its functions to validate inactivty and save it in DB
                   exitRequest();
                    
                }else{
                    //Do nothing
                }
            
            
            
            }
            
        
        
        
        });
        
      
        
        showDate();
        showTime();
        
        
        
        //Disabling inacitivy items so that they can be visible only if in inactive mode
        lblQuestion.setVisible(false);
        lblQuestion.setEnabled(false);
        btnYes.setVisible(false);
        btnYes.setEnabled(false);
        
        //Disabling all buttons because until in Auto In, people should be able to log out, break etc. 
        
        
                 //disabling buttons
                        btnLunchStart.setEnabled(false);
                       // btnLunchStart.setVisible(false);
                        btnLunchEnd.setEnabled(false);
                      //  btnLunchEnd.setVisible(false);
                        jComboBox1.setEnabled(false);
                     //   jComboBox1.setVisible(false);
                        btnStart.setEnabled(false);
                     //   btnStart.setVisible(false);
                        btnEnd.setEnabled(false);
                      //  btnEnd.setVisible(false);
                        btnLogOut.setEnabled(false);
                     //   btnLogOut.setVisible(false);
                     
                     
                     
                     //Changin JFrame Icon
                     this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("tmt_logo.JPG")));
                     
                 
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    void showDate(){
        Date d = new Date();
        SimpleDateFormat s = new SimpleDateFormat("yyyy-MM-dd");
        lblDate.setText(s.format(d));
        
    }
    
    void showTime(){
        new Timer(0, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
               Date t = new Date();
               SimpleDateFormat s = new SimpleDateFormat("hh:mm:ss a");
               lblTime.setText(s.format(t));
            }
        }).start();
    
    }
    
    //Button to setup timer for Aux (Lunch and any other Aux). 
               int auxSecondsPassed = 0;
               int auxMinutesPassed = 0;
               int auxHoursPassed = 0;
               boolean stopAux = false;
    public void auxTimer(){
         
        
         java.util.Timer myTimer = new java.util.Timer();
        TimerTask taskAux = new TimerTask() {
            @Override
            public void run() {
                
                     if(stopAux){
                        myTimer.cancel();
                    }else{
                         auxSecondsPassed++;
                     
                     }
                
    
                    if (auxSecondsPassed > 59){
                        auxSecondsPassed = 0;
                        auxMinutesPassed++;
                        
                    }else if(auxMinutesPassed > 59){
                        auxSecondsPassed = 0;
                        auxMinutesPassed = 0;
                        auxHoursPassed++;
                    }

               
                    
                    
                    //Setting time passed in label Aux
                    lblAux.setText(((auxHoursPassed < 10 ) ? "0" +  auxHoursPassed : auxHoursPassed) + ":"+ 
                                    ((auxMinutesPassed < 10 ) ? "0" +  auxMinutesPassed : auxMinutesPassed) + ":"+ 
                                    ((auxSecondsPassed < 10 ) ? "0" +  auxSecondsPassed : auxSecondsPassed )); 
                    
                    //Checking if timer should stop
               
                    

            }
        };
        
   
        myTimer.scheduleAtFixedRate(taskAux, 1000, 1000);

    }
    
  
    //################# Time for Auto IN #############################
    
         //Button to setup timer for Aux (Lunch and any other Aux). 
               int autoInSecondsPassed = 0;
               int autoInMinutesPassed = 0;
               int autoInHoursPassed = 0;
               boolean stopAutoIn = false;
    public void AutoInTimer(){
         
        
         java.util.Timer myTimer = new java.util.Timer();
        TimerTask taskAutoIn = new TimerTask() {
            @Override
            public void run() {
                
                     if(stopAutoIn){
                        myTimer.cancel();
                    }else{
                         autoInSecondsPassed++;
                     
                     }
                
    
                    if (autoInSecondsPassed > 59){
                        autoInSecondsPassed = 0;
                        autoInMinutesPassed++;
                        
                    }else if(autoInMinutesPassed > 59){
                        autoInSecondsPassed = 0;
                        autoInMinutesPassed = 0;
                        autoInHoursPassed++;
                    }

               
                    
                    
                    //Setting time passed in label Aux
                    lblStaffedTime.setText(((autoInHoursPassed < 10 ) ? "0" +  autoInHoursPassed : autoInHoursPassed) + ":"+ 
                                    ((autoInMinutesPassed < 10 ) ? "0" +  autoInMinutesPassed : autoInMinutesPassed) + ":"+ 
                                    ((autoInSecondsPassed < 10 ) ? "0" +  autoInSecondsPassed : autoInSecondsPassed )); 
                    
                    //Checking if timer should stop
               
                    

            }
        };
        
   
        myTimer.scheduleAtFixedRate(taskAutoIn, 1000, 1000);

    }
    
    
    
    
    
    
    
    //################# End Timer for Auto IN ##########################
    
    
    
    

    //******************Inactivity Module 
        
        int mouseX = 0;
        int mouseY;
        int InactivityTimes = 0;
        int seconds = 0;
        
        boolean toContinue = true;        
      
        
        //Despues pasar esto al buton de login.       
        
        //Despues pasar esto al buton de login. 

    
    //####************ Inactivity Module 
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        lblCode = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        lblAutoIn = new javax.swing.JLabel();
        btnLunchStart = new javax.swing.JButton();
        lblLunchStart = new javax.swing.JLabel();
        lblLunchEnd = new javax.swing.JLabel();
        btnLunchEnd = new javax.swing.JButton();
        btnStart = new javax.swing.JButton();
        btnEnd = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblInactivityTime = new javax.swing.JLabel();
        btnYes = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        lblStart = new javax.swing.JLabel();
        lblEnd = new javax.swing.JLabel();
        lblQuestion = new javax.swing.JLabel();
        btnLogOut = new javax.swing.JButton();
        lblAux = new javax.swing.JLabel();
        lblAuxType = new javax.swing.JLabel();
        lblStaffedTime = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(27, 163, 156));

        lblName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblName.setForeground(new java.awt.Color(255, 255, 255));
        lblName.setText("jLabel1");

        lblDate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDate.setForeground(new java.awt.Color(255, 255, 255));
        lblDate.setText("jLabel1");

        lblTime.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTime.setForeground(new java.awt.Color(255, 255, 255));
        lblTime.setText("jLabel1");

        lblCode.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblCode.setForeground(new java.awt.Color(255, 255, 255));
        lblCode.setText("jLabel1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblName)
                    .addComponent(lblCode))
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTime)
                    .addComponent(lblDate))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(lblDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCode)
                    .addComponent(lblTime))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setBackground(new java.awt.Color(27, 163, 156));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Auto In");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lblAutoIn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblAutoIn.setForeground(new java.awt.Color(27, 163, 156));

        btnLunchStart.setBackground(new java.awt.Color(27, 163, 156));
        btnLunchStart.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnLunchStart.setForeground(new java.awt.Color(255, 255, 255));
        btnLunchStart.setText("Lunch Start");
        btnLunchStart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLunchStartMouseClicked(evt);
            }
        });
        btnLunchStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLunchStartActionPerformed(evt);
            }
        });

        lblLunchStart.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblLunchStart.setForeground(new java.awt.Color(27, 163, 156));

        lblLunchEnd.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblLunchEnd.setForeground(new java.awt.Color(27, 163, 156));

        btnLunchEnd.setBackground(new java.awt.Color(27, 163, 156));
        btnLunchEnd.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnLunchEnd.setForeground(new java.awt.Color(255, 255, 255));
        btnLunchEnd.setText("Lunch End");
        btnLunchEnd.setEnabled(false);
        btnLunchEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLunchEndActionPerformed(evt);
            }
        });

        btnStart.setBackground(new java.awt.Color(27, 163, 156));
        btnStart.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnStart.setForeground(new java.awt.Color(255, 255, 255));
        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnEnd.setBackground(new java.awt.Color(27, 163, 156));
        btnEnd.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnEnd.setForeground(new java.awt.Color(255, 255, 255));
        btnEnd.setText("End");
        btnEnd.setEnabled(false);
        btnEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEndActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(27, 163, 156));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        jLabel1.setText("Inactivity");

        lblInactivityTime.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblInactivityTime.setForeground(new java.awt.Color(27, 163, 156));
        lblInactivityTime.setText("00:00:00");

        btnYes.setBackground(new java.awt.Color(27, 163, 156));
        btnYes.setForeground(new java.awt.Color(255, 255, 255));
        btnYes.setText("Yes");
        btnYes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnYesMouseClicked(evt);
            }
        });
        btnYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnYesActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---", "Meeting", "One On One", "Extra Time" }));

        lblStart.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblStart.setForeground(new java.awt.Color(27, 163, 156));
        lblStart.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblStart.setText("00:00:00");

        lblEnd.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblEnd.setForeground(new java.awt.Color(27, 163, 156));
        lblEnd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEnd.setText("00:00:00");

        lblQuestion.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblQuestion.setForeground(new java.awt.Color(255, 0, 0));
        lblQuestion.setText("jLabel2");
        lblQuestion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        btnLogOut.setBackground(new java.awt.Color(27, 163, 156));
        btnLogOut.setForeground(new java.awt.Color(255, 255, 255));
        btnLogOut.setText("LogOut");
        btnLogOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLogOutMouseClicked(evt);
            }
        });
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        lblAux.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblAux.setForeground(new java.awt.Color(27, 163, 156));
        lblAux.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAux.setText("00:00:00");

        lblAuxType.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblAuxType.setForeground(new java.awt.Color(27, 163, 156));
        lblAuxType.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAuxType.setText("No Aux Used");

        lblStaffedTime.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStaffedTime.setForeground(new java.awt.Color(27, 163, 156));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblEnd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnLunchEnd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnLunchStart, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblLunchStart, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblLunchEnd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, 0, 316, Short.MAX_VALUE)
                                    .addComponent(btnStart, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnEnd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(56, 56, 56))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblAutoIn, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblStaffedTime, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnYes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblQuestion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(lblAuxType, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblAux, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(btnLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(130, 130, 130))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(28, 28, 28)
                        .addComponent(lblInactivityTime, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(lblAutoIn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStaffedTime, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lblLunchStart, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblLunchEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(btnLunchStart)
                        .addGap(21, 21, 21)
                        .addComponent(btnLunchEnd)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnStart)
                .addGap(9, 9, 9)
                .addComponent(lblStart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEnd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblAux, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblAuxType, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnYes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInactivityTime)
                    .addComponent(jLabel1))
                .addGap(34, 34, 34)
                .addComponent(btnLogOut))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEndActionPerformed
        //End of Aux
        
        Date timeLunchEnd = new Date();
        SimpleDateFormat s = new SimpleDateFormat("hh:mm:ss a");
        lblEnd.setText(s.format(timeLunchEnd));
        
        //Stopping Aux Timer
        stopAux = true;
        //Resetting Aux label forecolor
          lblAux.setForeground(new Color(27,163,156));
        
        
        
        Connection conn = null;
        Connection conn2 = null;
        PreparedStatement psConsulta = null;
        PreparedStatement ps = null;
        ResultSet rs1 = null;
        ResultSet rs2 = null;

        String uType = jComboBox1.getSelectedItem().toString();
        String uLunchEnd = lblEnd.getText();
        String uDate = lblDate.getText();
        String uCode = lblCode.getText();
        String uTypeSearched = uType;
        String udateTime = uDate + " " + uLunchEnd;
        String aux_Duration = lblAux.getText();
        
        try {
            // String sql = "{CALL sp_registrarLunchEnd(?,?,?)}";
            //ps = MyConnection.getConnection().prepareStatement(sql);

            String start_time_type = "SELECT * FROM `time_start` WHERE `id_user`=? AND `type`=? ORDER BY id DESC LIMIT 1;";
            conn = Conexion.getConnection();
            psConsulta = conn.prepareStatement(start_time_type);
            psConsulta.setString(1, uCode);
            psConsulta.setString(2, uTypeSearched);

            rs1 = psConsulta.executeQuery();

            if(rs1.next()){
                String idStartTime = rs1.getString("id");
                String durationTimeStart = rs1.getString("time");
                String typeStart = rs1.getString("type");

                //JOptionPane.showMessageDialog(null, idStartTime);
                // JOptionPane.showMessageDialog(null, durationTimeStart);
                // JOptionPane.showMessageDialog(null, typeStart);

                String SQL_INSERT = "INSERT INTO `time_end`(`id`, `type`, `time`, `id_user`,`id_time_start`,`duration_time_start`,`type_start`,`aux_duration`) VALUES(NULL,?,?,?,?,?,?,? )";
                conn2 = Conexion.getConnection();
                ps = conn2.prepareStatement(SQL_INSERT);

                //ps.setString(1, "");
                ps.setString(1, uType);
                ps.setString(2, udateTime);
                ps.setString(3, uCode);
                ps.setString(4, idStartTime);
                ps.setString(5, durationTimeStart);
                ps.setString(6, typeStart);
                ps.setString(7, aux_Duration);
                ps.executeUpdate();

            }else{
                JOptionPane.showMessageDialog(null,"No Funcionó - Line 677");

            }

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());

        }finally {
            Conexion.close(psConsulta);
            Conexion.close(ps);
            Conexion.close(conn);
            Conexion.close(conn2);

        }

        //Disable Auto In Button

        btnLunchEnd.setEnabled(false);
        btnEnd.setEnabled(false);
       // btnEnd.setVisible(false);
       
        
          btnLunchStart.setEnabled(true);
    
    
          //disabling buttons
      
        jComboBox1.setEnabled(true);
        jComboBox1.setVisible(true);
        btnStart.setEnabled(true);
        btnStart.setVisible(true);
       btnLogOut.setEnabled(true);
        btnLogOut.setVisible(true);

        
        jComboBox1.setSelectedItem("---");

        
        seconds = 0;
        
        
    }//GEN-LAST:event_btnEndActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        // TODO add your handling code here:
        //setting Aux Time Start time in label
        
        if(jComboBox1.getSelectedItem().toString() == "---"){
            JOptionPane.showMessageDialog(null,"Please, Select an Aux Reason");
        
        }else{
        
                Date timeStart = new Date();
                SimpleDateFormat s = new SimpleDateFormat("hh:mm:ss a");
                lblStart.setText(s.format(timeStart));
                
                  //Starting the StopWatch 
                    //Setting everything to start from scratch
                    auxSecondsPassed = 0;
                    auxMinutesPassed = 0;
                    auxHoursPassed = 0;     
                    stopAux = false;
                    auxTimer();
                    //Setting Aux Label Foreground Color
                     lblAux.setForeground(Color.BLUE);
                    
                

                //Saving AutoIn Time in DB

                Connection conn = null;
                PreparedStatement ps = null;
                ResultSet rs = null;

                String uType = jComboBox1.getSelectedItem().toString();
                String uXtraTimeStart = lblStart.getText();
                //Sending aux reason to label

                 lblAuxType.setText(jComboBox1.getSelectedItem().toString());  
                
                //End SEnding Aux Reason to label
                String uDate = lblDate.getText();
                String uCode = lblCode.getText();
                String udateTime = uDate + " " + uXtraTimeStart;

                // String query = "INSERT INTO `autoin`(`id`, `autointime`, `autoindate`, `empcode`) VALUES(NULL, ?,?,? )";
                String SQL_INSERT = "INSERT INTO `time_start`(`id`, `type`, `time`, `id_user`) VALUES(NULL,?,?,? )";
                try {
                    // String sql = "{CALL sp_registrarLunchOut(?,?,?)}";
                    // ps = MyConnection.getConnection().prepareStatement(sql);
                    conn = Conexion.getConnection();
                    ps = conn.prepareStatement(SQL_INSERT);

                    //ps.setString(1, "");
                    ps.setString(1, uType);
                    ps.setString(2, udateTime);
                    ps.setString(3, uCode);

                    // rs = ps.executeQuery();
                    ps.executeUpdate();

                    //Disabling button
                    btnStart.setEnabled(false);
                    jComboBox1.setEnabled(false);
                

                     //Enabling LunchEnd Button
                     btnEnd.setEnabled(true);
                     btnEnd.setVisible(true);
                    lblStart.setVisible(true);
                    lblEnd.setVisible(true);
        
                    btnLunchStart.setEnabled(false);
    
                         
       
                     btnLogOut.setEnabled(false);
                     btnLogOut.setVisible(false);
    

                } catch (SQLException ex) {
                    System.out.println(ex.getMessage());

                }finally{
                    Conexion.close(ps);
                    Conexion.close(conn);

                }
        
               seconds = -64800;
        }
        
        //Disabling Xtratime start button so that it is not clicked again by acciden while it is still running
        
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnLunchEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLunchEndActionPerformed
        // TODO add your handling code here:

        //Initially this button is disabled, until lunchStart is clicked
        //this is to prevent clocking in a lundEnd incorrectly

        //setting Lunch End time in label
        Date timeLunchEnd = new Date();
        SimpleDateFormat s = new SimpleDateFormat("hh:mm:ss a");
        lblLunchEnd.setText(s.format(timeLunchEnd));

        //Saving AutoIn Time in DB
        /*
        PreparedStatement ps;
        ResultSet rs;
        */
        
        //Stopping Aux Timer
        stopAux = true;
        //Resetting label Aux time foreground
      
        lblAux.setForeground(new Color(27,163,156));
   
        

        Connection conn = null;
        Connection conn2 = null;
        PreparedStatement psConsulta = null;
        PreparedStatement ps = null;
        ResultSet rs1 = null;
        ResultSet rs2 = null;

        String uType = "Lunch End";
        String uLunchEnd = lblLunchEnd.getText();
        String uDate = lblDate.getText();
        String uCode = lblCode.getText();
        String uTypeSearched = "Lunch Start";
        String udateTime = uDate + " " + uLunchEnd;
        String aux_Duration = lblAux.getText();

        // String query = "INSERT INTO `autoin`(`id`, `autointime`, `autoindate`, `empcode`) VALUES(NULL, ?,?,? )";

        try {
            // String sql = "{CALL sp_registrarLunchEnd(?,?,?)}";
            //ps = MyConnection.getConnection().prepareStatement(sql);

            String start_time_type = "SELECT * FROM `time_start` WHERE `id_user`=? AND `type`=? ORDER BY id DESC LIMIT 1;";
            conn = Conexion.getConnection();
            psConsulta = conn.prepareStatement(start_time_type);
            psConsulta.setString(1, uCode);
            psConsulta.setString(2, uTypeSearched);

            rs1 = psConsulta.executeQuery();

            if(rs1.next()){
                String idStartTime = rs1.getString("id");
                String durationTimeStart = rs1.getString("time");
                String typeStart = rs1.getString("type");

                //JOptionPane.showMessageDialog(null, idStartTime);
                // JOptionPane.showMessageDialog(null, durationTimeStart);
                // JOptionPane.showMessageDialog(null, typeStart);

                String SQL_INSERT = "INSERT INTO `time_end`(`id`, `type`, `time`, `id_user`,`id_time_start`,`duration_time_start`,`type_start`,`aux_duration`) VALUES(NULL,?,?,?,?,?,?,? )";
                conn2 = Conexion.getConnection();
                ps = conn2.prepareStatement(SQL_INSERT);

                //ps.setString(1, "");
                ps.setString(1, uType);
                ps.setString(2, udateTime);
                ps.setString(3, uCode);
                ps.setString(4, idStartTime);
                ps.setString(5, durationTimeStart);
                ps.setString(6, typeStart);
                ps.setString(7, aux_Duration);

                ps.executeUpdate();

            }else{
                JOptionPane.showMessageDialog(null,"No Funcionó - Line 892");

            }

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());

        }finally {
            Conexion.close(psConsulta);
            Conexion.close(ps);
            Conexion.close(conn);
            Conexion.close(conn2);

        }

        //Disable Auto In Button

        btnLunchEnd.setEnabled(false);
        
          btnLunchStart.setEnabled(true);
    
    
          //disabling buttons
      
        jComboBox1.setEnabled(true);
        jComboBox1.setVisible(true);
        btnStart.setEnabled(true);
        btnStart.setVisible(true);
       btnLogOut.setEnabled(true);
        btnLogOut.setVisible(true);
    

        
        
        seconds = 0;
    }//GEN-LAST:event_btnLunchEndActionPerformed

    private void btnLunchStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLunchStartActionPerformed
        // TODO add your handling code here:

        //setting Lunch out time in label

        Date timeLunchStart = new Date();
        SimpleDateFormat s = new SimpleDateFormat("hh:mm:ss a");
        lblLunchStart.setText(s.format(timeLunchStart));

        //Saving Lunch Start Time in DB
        /*
        PreparedStatement ps;
        ResultSet rs; */
        
        //Starting the StopWatch 
        //Setting everything to start from scratch
        auxSecondsPassed = 0;
        auxMinutesPassed = 0;
        auxHoursPassed = 0;     
        stopAux = false;
        auxTimer();
        
        //Setting Aux Type label
        //Setting type of Aux in lblAuxtype
        lblAuxType.setText("Lunch");  
        //Changin color font to lblAux Time 
        lblAux.setForeground(Color.BLUE);

        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;

        String uType = "Lunch Start";
        String uLunchStart = lblLunchStart.getText();
        String uDate = lblDate.getText();
        String uCode = lblCode.getText();
        String udateTime = uDate + " " + uLunchStart;

        // String query = "INSERT INTO `autoin`(`id`, `autointime`, `autoindate`, `empcode`) VALUES(NULL, ?,?,? )";
        String SQL_INSERT = "INSERT INTO `time_start`(`id`, `type`, `time`, `id_user`) VALUES(NULL,?,?,? )";
        try {
            // String sql = "{CALL sp_registrarLunchOut(?,?,?)}";
            // ps = MyConnection.getConnection().prepareStatement(sql);
            conn = Conexion.getConnection();
            ps = conn.prepareStatement(SQL_INSERT);

            //ps.setString(1, "");
            ps.setString(1, uType);
            ps.setString(2, udateTime);
            ps.setString(3, uCode);

            // rs = ps.executeQuery();
            ps.executeUpdate();

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());

        }finally {

            Conexion.close(ps);
            Conexion.close(conn);
        }

        //Disable LunchStart button

        btnLunchStart.setEnabled(false);
        //Enabling LunchEnd Button
        btnLunchEnd.setEnabled(true);
    
          //disabling buttons
      
        jComboBox1.setEnabled(false);
        jComboBox1.setVisible(false);
        btnStart.setEnabled(false);
        btnStart.setVisible(false);
       btnLogOut.setEnabled(false);
        btnLogOut.setVisible(false);
        btnEnd.setEnabled(false);
        btnEnd.setVisible(false);
        lblStart.setVisible(false);
        lblEnd.setVisible(false);

  
        seconds = -64800;
    }//GEN-LAST:event_btnLunchStartActionPerformed

    
    //Variables for Inactivity Tracker
     int  secondsPassed = 0;
     int secondsBeforeVerifying = 60; //it means tht every one minute, we will run a verification for inactivity
     int mouseXFirstPosition = 0;
     int inactivitySecondsAllowed = 180; //It means that once we detected inactivity, we will wait 180 secs, to ask are you there, then we will allow..
                                         //another 30 seconds to answer
     int inactivitySecondsPassedLevelOne = 0;//Just so that once it starts counting inac, we see if this reaches the limit, 
                                            //if it does not reach the limit, then it will be reset to 0 once the Mouse is moved again
     int inactivitySecondsPassedLevelTwo = 0;//This will only activate once the Inactivity time allowed is reached, thus it will not reset but until 
     int inactivityMinutesPassedLevelTwo;
     int inactivityHoursPassedLevelTwo;  //the Yes button is pressed and the inactiv seconds will be saved in the DB. 
     boolean inactivity = false;
     
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //setting autoin time in label
        Date timeAutoIn = new Date();
        SimpleDateFormat s = new SimpleDateFormat("hh:mm:ss a");
        lblAutoIn.setText(s.format(timeAutoIn));
        //Saving AutoIn Time in DB
        /*
        PreparedStatement ps;
        ResultSet rs;
        */
        
        //Initiating Auto In Timer
        AutoInTimer();
        
        
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;

        String uType = "Auto In";
        String uAutoIn = lblAutoIn.getText();
        String uDate = lblDate.getText();
        String dateTime = uDate + " " + uAutoIn;

        String uCode = lblCode.getText();

        String SQL_INSERT = "INSERT INTO `time_start`(`id`, `type`, `time`, `id_user`) VALUES(NULL,?,?,? )";
        //   INSERT INTO `time_start` (`id`, `type`, `time`, `id_user`) VALUES (NULL, 'Auto In', CURRENT_TIMESTAMP, '1000');
        try {
            // String sql = "INSERT INTO time_start(type, time, id_user)  VALUES(?,?,?)";
            conn = Conexion.getConnection();
            ps = conn.prepareStatement(SQL_INSERT);

            //ps = MyConnection.getConnection().prepareStatement(sql);
            // ps.setString(1, "");
            ps.setString(1, uType);
            ps.setString(2, dateTime);
            ps.setString(3, uCode);

            //ps.executeQuery();
            ps.executeUpdate();

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
            JOptionPane.showMessageDialog(null,ex.getMessage());

        }//finally{
           // Conexion.close(ps);
           // Conexion.close(conn);

        //}
        //Disable Auto In Button
        jButton1.setEnabled(false);
          //disabling buttons
        btnLunchStart.setEnabled(true);
        btnLunchStart.setVisible(true);
       
        jComboBox1.setEnabled(true);
        jComboBox1.setVisible(true);
        btnStart.setEnabled(true);
        btnStart.setVisible(true);
       btnLogOut.setEnabled(true);
        btnLogOut.setVisible(true);

        //Enabling Logout button
        
        
        
        
        //****************************Getting the time allowed from DB. If there is no time allowed then it will be 180 
        
        Connection conn2 = null;
        PreparedStatement psConsulta = null;
        ResultSet rs2 = null;

        // String query = "INSERT INTO `autoin`(`id`, `autointime`, `autoindate`, `empcode`) VALUES(NULL, ?,?,? )";

        try {
            // String sql = "{CALL sp_registrarLunchEnd(?,?,?)}";
            //ps = MyConnection.getConnection().prepareStatement(sql);

            String INAC_TIME_ALLOWED = "SELECT * FROM `inactivy_allowed` WHERE `id_user`=? ORDER BY id DESC LIMIT 1;";
            conn2 = Conexion.getConnection();
            psConsulta = conn.prepareStatement(INAC_TIME_ALLOWED);
            psConsulta.setString(1, uCode);

            rs2 = psConsulta.executeQuery();

            if(rs2.next()){
                String timeAllowed = rs2.getString("time");
                
                inactivitySecondsAllowed = Integer.parseInt(timeAllowed);
                
          }else{
                JOptionPane.showMessageDialog(null,"No Funcionó - Line 1123");

            }

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());

        }//finally {
           // Conexion.close(psConsulta);
           // Conexion.close(conn2);

       // }

  
        //*******************************************************Inactivity System
        
        java.util.Timer myTimer = new java.util.Timer();
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                seconds++;
                System.out.println("Seconds Passed By: " + seconds);
                
                                   
           
                    
                    if(seconds > secondsBeforeVerifying){
                        //Obtain seconds X position and compare                                             
                       
                            if(MouseInfo.getPointerInfo().getLocation().x == mouseXFirstPosition){
                                
                                    //since after the secondsBeforeVerifying the position of the mouse is still the same
                                    //it starts to count secondsAllowed of Inactivity
                                    //before it reaches the totoal seconds like 30 seconds before, it it will ask, are you there?
                                    //If no answer, then once it reachses the limite allowed, it will start counting inactivity
                                    
                                    
                                    //it starts the first verification count
                                    inactivitySecondsPassedLevelOne ++;    
                                    
                                    
                                    if(inactivitySecondsPassedLevelOne == (inactivitySecondsAllowed - 30)){//30 seconds before exceeding time allowed, it asks.... 
                                    
                                         
                                        // Since we are about to reach the limi time allowed by 30 secs, it asks are you there?
                                        //If the agent clicks yes before surpassing the limit, everything will be set to 0, otherwise, 
                                        // the inactivitySecondsPassedLevelTwo will be saved in the label and DB. 
                                         
                                         lblQuestion.setText("Are you there?");
                                                 maximize();
                                                 
                                                             //disabling buttons
                                                                    btnLunchStart.setEnabled(false);
                                                                    btnLunchStart.setVisible(false);
                                                                    btnLunchEnd.setEnabled(false);
                                                                    btnLunchEnd.setVisible(false);
                                                                    jComboBox1.setEnabled(false);
                                                                    jComboBox1.setVisible(false);
                                                                    btnStart.setEnabled(false);
                                                                    btnStart.setVisible(false);
                                                                    btnEnd.setEnabled(false);
                                                                    btnEnd.setVisible(false);
                                                                    btnLogOut.setEnabled(false);
                                                                    btnLogOut.setVisible(false);
                                                                    lblStart.setVisible(false);
                                                                    lblEnd.setVisible(false);
                                                                    lblAuxType.setVisible(false);
                                                                    lblAux.setVisible(false);
                                                                
                                                                
                                                                //Enabling question and Yes button 
                                                                lblQuestion.setVisible(true);
                                                                lblQuestion.setEnabled(true);
                                                                
                                                                btnYes.setVisible(true);
                                                                btnYes.setEnabled(true);
                                                                
                                    
                                    
                                    }//End 30 seconds before exceeding time allowed,
                                    
                                     if(inactivitySecondsPassedLevelOne > inactivitySecondsAllowed ){ 
                                        //It starts coutning second level since we reached hte limite
                                        //Once this coutn starts, it can only be reset by the Yes button, and the time will be saved in DB and label
                                       
                                        
                                        inactivitySecondsPassedLevelTwo ++;
                                                            if (inactivitySecondsPassedLevelTwo > 59){
                                                                inactivitySecondsPassedLevelTwo = 0;
                                                                inactivityMinutesPassedLevelTwo++;

                                                            }else if(inactivityMinutesPassedLevelTwo > 59){
                                                                inactivitySecondsPassedLevelTwo = 0;
                                                                inactivityMinutesPassedLevelTwo = 0;
                                                                inactivityHoursPassedLevelTwo++;
                                                            }
                                       //Setting time passed in label Aux
                                       lblInactivityTime.setText(((inactivityHoursPassedLevelTwo < 10 ) ? "0" +  inactivityHoursPassedLevelTwo : inactivityHoursPassedLevelTwo) + ":"+ 
                                                       ((inactivityMinutesPassedLevelTwo < 10 ) ? "0" +  inactivityMinutesPassedLevelTwo : inactivityMinutesPassedLevelTwo) + ":"+ 
                                                       ((inactivitySecondsPassedLevelTwo < 10 ) ? "0" +  inactivitySecondsPassedLevelTwo : inactivitySecondsPassedLevelTwo ));
 
                                        
                                        inactivity = true;
                                        btnYes.setVisible(true);
                                        btnYes.setEnabled(true);
                                         
                                      }

                                                    
                            }else{
                                //If not equal XfirstPosition and new Postion reset seconds to 0   
                                    seconds = 0;
                                    inactivitySecondsPassedLevelOne = 0;
                                  
                            }

                    }
                         //Obtener first X position
                     mouseXFirstPosition = MouseInfo.getPointerInfo().getLocation().x;

        
            }
        };
        
   
        myTimer.scheduleAtFixedRate(task, 1000, 1000);

        
        //End Inactivity System. ******************************************************
        
             Conexion.close(ps);
            Conexion.close(conn);
        
        
            Conexion.close(psConsulta);
            Conexion.close(conn2);

    }//GEN-LAST:event_jButton1ActionPerformed

    //Maixmizes window and makes sure it is on the top visible
    public void maximize(){

       // this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        this.setExtendedState(JFrame.NORMAL);
        this.setAlwaysOnTop(true);
        jPanel2.setBackground(Color.yellow);
       
    }
    

  
    
    private void btnYesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnYesMouseClicked
        // TODO add your handling code here:
        
            //Resetting Jpanel color
            jPanel2.setBackground(Color.WHITE);
        
            //Before setting everything to 0 
            // We have to save info in DB, we have to set info in inactivity label
            
                                           
                                                            //If the "Yes" button has not been pressed and 15 seconds have gone by
                                                                                                     
                                                  if( inactivity){
                                                                //IF No count inactivity
                                                                
                                                              //  lblInactivityTime.setText( inactivitySecondsPassedLevelTwo + " seconds of Inactivity");
                                                                
                                                                
                                                                //Enclosing everythig in if so that the DB storage gets triggered only once
                                                                
                                                                //Saving Inactivity to DB
                                                                    Connection conn3 = null;
                                                                    PreparedStatement ps3 = null;
                                                                    ResultSet rs3 = null;

                                                                    String uTypeInac = "Inactivity";
                                                                    String uInactivityInac = lblInactivityTime.getText().toString();
                                                                    String uDateInac = lblDate.getText();
                                                                    String uTimeInac = lblTime.getText();
                                                                    String dateTimeInac = uDateInac + " " + uTimeInac;

                                                                    String uCodeInac = lblCode.getText();

                                                                    String SQL_INSERT_INAC = "INSERT INTO `inactivity`(`id`, `duration`, `date_time`, `id_user`) VALUES(NULL,?,?,? )";
                                                                    //   INSERT INTO `time_start` (`id`, `type`, `time`, `id_user`) VALUES (NULL, 'Auto In', CURRENT_TIMESTAMP, '1000');
                                                                    try {
                                                                        // String sql = "INSERT INTO time_start(type, time, id_user)  VALUES(?,?,?)";
                                                                        conn3 = Conexion.getConnection();
                                                                        ps3 = conn3.prepareStatement(SQL_INSERT_INAC);

                                                                        //ps = MyConnection.getConnection().prepareStatement(sql);
                                                                        // ps.setString(1, "");
                                                                        ps3.setString(1, uInactivityInac);
                                                                        ps3.setString(2, dateTimeInac);
                                                                        ps3.setString(3, uCodeInac);

                                                                        //ps.executeQuery();
                                                                        ps3.executeUpdate();

                                                                    } catch (SQLException ex) {
                                                                        System.out.println(ex.getMessage());

                                                                    }//finally{
                                                                       // Conexion.close(ps);
                                                                       // Conexion.close(conn);

                                                                    //}
                                                                                Conexion.close(conn3);
                                                                                Conexion.close(ps3);

                                                                    //Resetting inactivity Flag  and Inactivity Times since they were all saved already in DB          
                                                                    inactivity = false;
                                                                    inactivitySecondsPassedLevelTwo = 0;
                                                                    inactivityMinutesPassedLevelTwo = 0;
                                                                    inactivityHoursPassedLevelTwo = 0;
                                                                    
                                                                    
                                                    } //End IF Validating if there was inactiviy and saving it in DB and label   
            
 
                seconds = 0;
                inactivitySecondsPassedLevelOne = 0; 
                inactivitySecondsPassedLevelTwo = 0;
                
                                
                this.setExtendedState(JFrame.NORMAL);
                this.setAlwaysOnTop(false);
                
                     //disabling buttons
                        btnLunchStart.setEnabled(true);
                        btnLunchStart.setVisible(true);
                        btnLunchEnd.setEnabled(true);
                        btnLunchEnd.setVisible(true);
                        jComboBox1.setEnabled(true);
                        jComboBox1.setVisible(true);
                        btnStart.setEnabled(true);
                        btnStart.setVisible(true);
                        btnEnd.setEnabled(true);
                        btnEnd.setVisible(true);
                        btnLogOut.setEnabled(true);
                        btnLogOut.setVisible(true);


                    //Enabling question and Yes button 
                    lblQuestion.setVisible(false);
                    lblQuestion.setEnabled(false);

                    btnYes.setVisible(false);
                    btnYes.setEnabled(false);
          
        
    }//GEN-LAST:event_btnYesMouseClicked

    
    //Procedure to exit APP
    public void exitRequest(){
        
        
            ///############ Saving Auto In Time
        Connection conn = null;
        Connection conn2 = null;
        PreparedStatement psConsulta = null;
        PreparedStatement ps = null;
        ResultSet rs1 = null;
        ResultSet rs2 = null;

        String uType = "Log Out";
        String uAutoInEnd = lblTime.getText();
        String uDate = lblDate.getText();
        String uCode = lblCode.getText();
        String uTypeSearched = "Auto In";
        String udateTime = uDate + " " + uAutoInEnd;
        String autoIn_Duration = lblStaffedTime.getText();

        // String query = "INSERT INTO `autoin`(`id`, `autointime`, `autoindate`, `empcode`) VALUES(NULL, ?,?,? )";

        try {
            // String sql = "{CALL sp_registrarLunchEnd(?,?,?)}";
            //ps = MyConnection.getConnection().prepareStatement(sql);

            String start_time_type = "SELECT * FROM `time_start` WHERE `id_user`=? AND `type`=? ORDER BY id DESC LIMIT 1;";
            conn = Conexion.getConnection();
            psConsulta = conn.prepareStatement(start_time_type);
            psConsulta.setString(1, uCode);
            psConsulta.setString(2, uTypeSearched);

            rs1 = psConsulta.executeQuery();

            if(rs1.next()){
                String idStartTime = rs1.getString("id");
                String durationTimeStart = rs1.getString("time");
                String typeStart = rs1.getString("type");

                //JOptionPane.showMessageDialog(null, idStartTime);
                // JOptionPane.showMessageDialog(null, durationTimeStart);
                // JOptionPane.showMessageDialog(null, typeStart);

                String SQL_INSERT = "INSERT INTO `time_end`(`id`, `type`, `time`, `id_user`,`id_time_start`,`duration_time_start`,`type_start`,`aux_duration`) VALUES(NULL,?,?,?,?,?,?,? )";
                conn2 = Conexion.getConnection();
                ps = conn2.prepareStatement(SQL_INSERT);

                //ps.setString(1, "");
                ps.setString(1, uType);
                ps.setString(2, udateTime);
                ps.setString(3, uCode);
                ps.setString(4, idStartTime);
                ps.setString(5, durationTimeStart);
                ps.setString(6, typeStart);
                ps.setString(7, autoIn_Duration);

                ps.executeUpdate();

            }else{
                JOptionPane.showMessageDialog(null,"No Funcionó - Line 1438");

            }

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());

        }//finally {
          //  Conexion.close(psConsulta);
          //  Conexion.close(ps);
          //  Conexion.close(conn);
          //  Conexion.close(conn2);

        //}

        
            // ################# End SAving Auto In Time
           
        
         //Before letting someone close the application we have to verify if there was inactivity 
        //that they want to hide, and we have to save it to the DB. 
        
        
            // We have to save info in DB, we have to set info in inactivity label
            
                                           
                                                            //If the "Yes" button has not been pressed and 15 seconds have gone by
                                                                                                     
                                                  if( inactivity /*30sec above time allowed has gone byd*/){
                                                                //IF No count inactivity
                                                                
                                                               // lblInactivityTime.setText( inactivitySecondsPassedLevelTwo + " seconds of Inactivity");
                                                                
                                                                
                                                                //Enclosing everythig in if so that the DB storage gets triggered only once
                                                                
                                                                //Saving Inactivity to DB
                                                                    Connection conn3 = null;
                                                                    PreparedStatement ps3 = null;
                                                                    ResultSet rs3 = null;

                                                                    String uTypeInac = "Inactivity";
                                                                    String uInactivityInac = lblInactivityTime.getText().toString();
                                                                    
                                                                    String uDateInac = lblDate.getText();
                                                                    String uTimeInac = lblTime.getText();
                                                                    String dateTimeInac = uDateInac + " " + uTimeInac;

                                                                    String uCodeInac = lblCode.getText();

                                                                    String SQL_INSERT_INAC = "INSERT INTO `inactivity`(`id`, `duration`, `date_time`, `id_user`) VALUES(NULL,?,?,? )";
                                                                    //   INSERT INTO `time_start` (`id`, `type`, `time`, `id_user`) VALUES (NULL, 'Auto In', CURRENT_TIMESTAMP, '1000');
                                                                    try {
                                                                        // String sql = "INSERT INTO time_start(type, time, id_user)  VALUES(?,?,?)";
                                                                        conn3 = Conexion.getConnection();
                                                                        ps3 = conn3.prepareStatement(SQL_INSERT_INAC);

                                                                        //ps = MyConnection.getConnection().prepareStatement(sql);
                                                                        // ps.setString(1, "");
                                                                        ps3.setString(1, uInactivityInac);
                                                                        ps3.setString(2, dateTimeInac);
                                                                        ps3.setString(3, uCodeInac);

                                                                        //ps.executeQuery();
                                                                        ps3.executeUpdate();

                                                                    } catch (SQLException ex) {
                                                                        System.out.println(ex.getMessage());

                                                                    }//finally{
                                                                       // Conexion.close(ps);
                                                                       // Conexion.close(conn);

                                                                    //}
                                                                                Conexion.close(conn3);
                                                                                Conexion.close(ps3);

                                                                
                                                                
                                                            
                                                    } //End IF Validating if there was inactiviy and saving it in DB and label   
     
        
        //Closing the APP
        System.exit(0);
        
         Conexion.close(psConsulta);
            Conexion.close(ps);
            Conexion.close(conn);
            Conexion.close(conn2);
    
    
    
    }
    
    
    
    
    
    private void btnLogOutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLogOutMouseClicked
        // TODO add your handling code here:
        
         int x = JOptionPane.showConfirmDialog(null, "Are you sure you want to close the APP?", "Close", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
           
                if(x == JOptionPane.YES_OPTION){
                    //e.getWindow().dispose();
                     exitRequest();
                
                }else{
                    //Do nothing
                }
        
       
        
        
        
    }//GEN-LAST:event_btnLogOutMouseClicked

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void btnYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnYesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnYesActionPerformed

    private void btnLunchStartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLunchStartMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLunchStartMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(homePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(homePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(homePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(homePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new homePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEnd;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnLunchEnd;
    private javax.swing.JButton btnLunchStart;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnYes;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblAutoIn;
    private javax.swing.JLabel lblAux;
    private javax.swing.JLabel lblAuxType;
    public javax.swing.JLabel lblCode;
    public javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblEnd;
    private javax.swing.JLabel lblInactivityTime;
    private javax.swing.JLabel lblLunchEnd;
    private javax.swing.JLabel lblLunchStart;
    public javax.swing.JLabel lblName;
    private javax.swing.JLabel lblQuestion;
    private javax.swing.JLabel lblStaffedTime;
    private javax.swing.JLabel lblStart;
    public javax.swing.JLabel lblTime;
    // End of variables declaration//GEN-END:variables
}
